# Generated by Django 5.2.7 on 2025-10-27 17:15

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('HOSPITAL', 'Hospital'), ('DOCTOR', 'Doctor'), ('PATIENT', 'Patient'), ('ADMIN', 'Administrator')], help_text='User role', max_length=20)),
                ('permission_key', models.CharField(help_text="Unique permission key (e.g., 'can_delete_appointments')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Human-readable permission description')),
                ('is_granted', models.BooleanField(default=False, help_text='Whether this permission is granted to the role')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'role_permissions',
                'ordering': ['role', 'permission_key'],
                'indexes': [models.Index(fields=['role', 'is_granted'], name='role_permis_role_5bbcf6_idx')],
                'unique_together': {('role', 'permission_key')},
            },
        ),
        migrations.CreateModel(
            name='SystemMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(help_text="Metric name (e.g., 'active_users', 'response_time')", max_length=100)),
                ('metric_value', models.FloatField(help_text='Metric value')),
                ('metric_type', models.CharField(choices=[('COUNTER', 'Counter'), ('GAUGE', 'Gauge'), ('HISTOGRAM', 'Histogram')], default='GAUGE', help_text='Metric type', max_length=20)),
                ('tags', models.JSONField(blank=True, default=dict, help_text='Additional tags for filtering')),
                ('recorded_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'system_metrics',
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['metric_name', '-recorded_at'], name='system_metr_metric__7a9cff_idx'), models.Index(fields=['metric_type'], name='system_metr_metric__054eaf_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATE', 'Created'), ('UPDATE', 'Updated'), ('DELETE', 'Deleted'), ('VIEW', 'Viewed'), ('EXPORT', 'Exported'), ('IMPORT', 'Imported')], help_text='Action performed', max_length=20)),
                ('model_name', models.CharField(help_text='Name of the affected model', max_length=100)),
                ('object_id', models.CharField(help_text='ID of the affected object', max_length=100)),
                ('object_repr', models.CharField(blank=True, help_text='String representation of the object', max_length=200)),
                ('changes', models.JSONField(blank=True, default=dict, help_text='JSON of changes made')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['model_name', '-created_at'], name='audit_logs_model_n_47bca0_idx'), models.Index(fields=['user', '-created_at'], name='audit_logs_user_id_6193b2_idx'), models.Index(fields=['action', '-created_at'], name='audit_logs_action_bcaa71_idx')],
            },
        ),
        migrations.CreateModel(
            name='BackupRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_type', models.CharField(choices=[('DATABASE', 'Database Backup'), ('FILES', 'File Backup'), ('FULL', 'Full System Backup')], help_text='Type of backup', max_length=20)),
                ('file_path', models.CharField(blank=True, help_text='Path to backup file', max_length=500)),
                ('file_size', models.BigIntegerField(default=0, help_text='Backup file size in bytes')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', help_text='Backup status', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if backup failed')),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Backup start timestamp')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Backup completion timestamp', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional backup metadata')),
                ('initiated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiated_backups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'backup_records',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['status', '-started_at'], name='backup_reco_status_623400_idx'), models.Index(fields=['backup_type'], name='backup_reco_backup__e08c83_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Unique configuration key', max_length=100, unique=True)),
                ('value', models.TextField(help_text='Configuration value (stored as text)')),
                ('data_type', models.CharField(choices=[('STRING', 'String'), ('INTEGER', 'Integer'), ('BOOLEAN', 'Boolean'), ('JSON', 'JSON'), ('FLOAT', 'Float')], default='STRING', help_text='Data type of the value', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of this configuration')),
                ('category', models.CharField(choices=[('GENERAL', 'General Settings'), ('EMAIL', 'Email Configuration'), ('SECURITY', 'Security Settings'), ('NOTIFICATION', 'Notification Settings'), ('FEATURE', 'Feature Flags'), ('MAINTENANCE', 'Maintenance Mode')], default='GENERAL', help_text='Configuration category', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_configs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'system_configurations',
                'ordering': ['category', 'key'],
                'indexes': [models.Index(fields=['key'], name='system_conf_key_35f9ec_idx'), models.Index(fields=['category', 'is_active'], name='system_conf_categor_eb7070_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], help_text='Log severity level', max_length=20)),
                ('category', models.CharField(choices=[('AUTHENTICATION', 'Authentication'), ('AUTHORIZATION', 'Authorization'), ('DATABASE', 'Database'), ('BACKUP', 'Backup'), ('SECURITY', 'Security'), ('PERFORMANCE', 'Performance'), ('SYSTEM', 'System'), ('API', 'API')], help_text='Log category', max_length=50)),
                ('message', models.TextField(help_text='Log message')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent')),
                ('request_path', models.CharField(blank=True, help_text='Request URL path', max_length=500)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional log context')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='system_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'system_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['level', '-created_at'], name='system_logs_level_cded50_idx'), models.Index(fields=['category', '-created_at'], name='system_logs_categor_b284e6_idx'), models.Index(fields=['user', '-created_at'], name='system_logs_user_id_c751f1_idx')],
            },
        ),
    ]
